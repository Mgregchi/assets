//const dat = new Date();
$(document).ready(function() {
    $("[data-name='navbar-tog']").click(function() {
        $("[data-name='navbar']").toggleClass('sticky-top')

    })

    function cElement(elemName, options) {
        //if(elemName.length >1)
        var content, name
        if (options) {
            content = options.content
            name = options.name

            el = document.createElement(elemName)//, options)
            el.name = name;
            el.content = content
            document.head.append(el)
        }

    }

    const csrftoken = document.querySelector('[name=csrfmiddlewaretoken]').value;

    function cart(id,action) {
        let a,r,d,c,method, url, inputVal
        switch (action) {
            case 'add':
                method="POST"
                //"{#{% url 'cart:cart_add' product.id %}"#}
                url="/cart/add/".concat(id)
                break;
            case'remove':
                method="POST"
                url = "cart/remove/".concat(id)
                //"{#{% url 'cart:cart_remove' product.id %}"#}
            
            case "detail":
                method="GET"
                //"{% url 'cart:cart_detail' %}"
                url="/cart/"
            case "check":
                method="GET"
                url = "/cart/check/".concat(id)
                // method is get. Just returns cart details
            default:
                break;
        }
        fetch(url,{
            headers:{'X-CSRFToken':csrftoken},
            method: method,
            mode:"same-origin"
        }).then(response => response.json())
        
        .then(data => {
          console.log(data.product.quantity);
          if (data.product.quantity) {
              inputVal =document.getElementById(id)
              //inputVal.val(data.product.quantity)
              $(inputVal).val(data.product.quantity)

          }
        })
          /*
        .then(function(response) {
            //
            resp = JSON.parse(response["instance"]);
            console.log(response)
        })*/
        .catch(function(error) {
            /* failure */
        })
    }


    /*
    let products = {{product}}
    console.log(products)*/
    //console.log($("#inlineFormSelectPref").val())
    var options = {
                    html: true,
                    //title: "Optional: HELLO(Will overide the default-the inline title)",
                    //html element
                    //content: $("#popover-content")
                    customClass:"bg-light",
                    content: $('[data-name="popover-content"]')
                    //Doing below won't work. Shows title only
                    //content: $("#popover-content").html()
        
                }
                var exampleEl = document.getElementById('example')
                var popover = new bootstrap.Popover(exampleEl, options)





    function tgl(e,d,f,r) {

        type = $(e).attr("data-type");
        if (type =="minus") {
        }
        let btn =e.currentTarget
        console.log(btn)
        let inputVal = btn.parentElement.previousElementSibling.children[1].children[0]
        let id = inputVal.id
        console.log("ID ", id)
        //const op= cart(id=id,action="check")
        $(inputVal).val(+1)
        //console.log(inpVal.val(+1))
        let itemQ = btn.parentElement.previousElementSibling
        //let itemQ = btn.parentElement.previousElementSibling.children[0]
        /*
        $(itemQ).css('content-visibility', 'visible');
        $(itemQ).css('visibility', 'visible');

        $(btn.parentElement).css('content-visibility', 'hidden');  
        $(btn.parentElement).css('visibility', 'hidden'); */

        $(itemQ).toggleClass("c");
        console.log("ITEMQ ", itemQ)
        console.log("BTN PARENT ",btn.parentElement)
        $(btn.parentElement).css("display","none"); 
        console.log("BTN PARENT AFTER ",btn.parentElement)

        return true
    }        
    

    $(".btn-cart").click(function(e) {
      t = tgl(e=e,d=null, f=null,r=null)
    })


    let currentVal;
    /*$('.alert').alert() */       
    $('.btn-number').click(function(e){
        e.preventDefault();
        
        fieldName = $(this).attr('data-field');
        type      = $(this).attr('data-type');
        var input = $("input[name='"+fieldName+"']");
        var currentVal = parseInt(input.val());
        if (!isNaN(currentVal)) {
            if(type == 'minus') {
                if(currentVal > input.attr('min')) {
                    input.val(currentVal - 1).change();
                    /*input.val().change()*/
                } 
                if(parseInt(input.val()) == input.attr('min')) {
                    
                    /*$(this).attr('disabled', true);*/
                    /*
                    console.log(this.parentElement.parentElement.lastElementChild);
                    console.log(this.parentElement.nextSibling.nextSibling.lastElementChild.parentElement)
                    console.log(this.parentElement.nextSibling.nextSibling)     
                    
                    t = tgl(e=e,r=this.parentElement.nextSibling.nextSibling)
                    */
                    //console.log(this.parentElement.nextSibling.nextSibling)     

                    let p = this.parentElement.nextSibling.nextSibling
                    console.log("MINUS BTN PARENT B4: ",p)
                   //$(p).css('content-visibility', 'visible'); 
                   //$(p).css('visibility', 'visible'); 
                    $(p).css("display", "block")
                    console.log("MINUS BNT PARENT AFTER: ",p)

                   //$(this.parentElement).css('content-visibility', 'hidden')
                   //$(this.parentElement).css('visibility', 'hidden')
                   $(this.parentElement).toggleClass('c')
                   console.log("PARENT ",$(this.parentElement))

                }

            } else if(type == 'plus') {

                if(currentVal < input.attr('max')) {
                    input.val(currentVal + 1).change();
                }
                if(parseInt(input.val()) == input.attr('max')) {
                    $(this).attr('disabled', true);
                }

            }
        } else {
            input.val(0);
        }
    });
    $('.input-number').focusin(function(){
    $(this).data('oldValue', $(this).val());
    });
    $('.input-number').change(function() {
        let name
        minValue =  parseInt($(this).attr('min'));
        maxValue =  parseInt($(this).attr('max'));
        valueCurrent = parseInt($(this).val());
        
        name = $(this).attr('name');
        if(valueCurrent >= minValue) {
            $(".btn-number[data-type='minus'][data-field='"+name+"']").removeAttr('disabled')
        } else {
            alert('Sorry, the minimum value was reached');
            $(this).val($(this).data('oldValue'));
        }
        if(valueCurrent <= maxValue) {
            $(".btn-number[data-type='plus'][data-field='"+name+"']").removeAttr('disabled')
        } else {
            alert('Sorry, the maximum value was reached');
            $(this).val($(this).data('oldValue'));
        }
        
        
    });
    $(".input-number").keydown(function (e) {
            // Allow: backspace, delete, tab, escape, enter and .
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
                // Allow: Ctrl+A
                (e.keyCode == 65 && e.ctrlKey === true) || 
                // Allow: home, end, left, right
                (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
    });    

        
        $("[data-validate='num']").keydown(function (e) {
            // Allow: backspace, delete, tab, escape, enter and .
            if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
                // Allow: Ctrl+A
                (e.keyCode == 65 && e.ctrlKey === true) || 
                // Allow: home, end, left, right
                (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
            }
            // Ensure that it is a number and stop the keypress
            if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                e.preventDefault();
            }
        });            



        /*
        var toast;
        let toastOption = {
            animation: true,
            delay: 15000
        }
        var toastElList = [].slice.call(document.querySelectorAll('.toast'))
        var toastList = toastElList.map(function (toastEl) {
            toast = new bootstrap.Toast(toastEl, toastOption)
        })
        toast.show()*/



        var toastTrigger = document.getElementById('liveToastBtn')
        var toastLiveExample = document.getElementById('liveToast')
        if (toastTrigger) {
        toastTrigger.addEventListener('click', function () {
            var toast = new bootstrap.Toast(toastLiveExample)

            toast.show()
        })
        }

    renderer=function() {
        // check if all resources is loaded then stop animation
        setTimeout(function() {
            $(".activity").css('animation','none');//.animate('none');
            $("[data-name='load-wraper']")
            $("[data-name='load-activity'] ").toggleClass("activity")//.css("animation background-image", none)
            $("[data-name='wraper']").toggleClass("wraper")

            //$("[data-name='load-wraper']").attr("style", "")//removeClass('load-wrapper')
            //$("[data-name='load-activity'] ").attr("class", "")//removeClass('load-activity')
            $("[data-name='content']").css('visibility', 'visible')
        }, 7000);//if content is loaded stop animation
    }
    renderer();
});